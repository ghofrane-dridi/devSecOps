pipeline {
    agent any

    tools {
        maven 'M3'         // Maven configur√© dans Jenkins
        jdk 'JDK 17'       // JDK configur√© dans Jenkins
    }

    environment {
        JAVA_HOME        = tool('JDK 17')
        PATH             = "${JAVA_HOME}/bin:${env.PATH}"
        GITHUB_TOKEN     = credentials('github-token')      // GitHub token dans Jenkins Credentials
        SONAR_TOKEN      = credentials('sonar-token')       // SonarQube token dans Jenkins Credentials
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Clonage du d√©p√¥t GitHub...'
                git branch: 'main',
                    url: "https://github.com/ghofrane-dridi/devSecOps.git",
                    credentialsId: 'github-creds'
            }
        }

        stage('Build & Test') {
            steps {
                echo 'üèóÔ∏è Compilation et tests Maven...'
                sh 'mvn clean verify'
            }
        }

        stage('JaCoCo Report') {
            steps {
                echo 'üìä G√©n√©ration du rapport JaCoCo...'
                sh 'mvn jacoco:report'
            }
        }

        stage('Publish JaCoCo Report') {
            steps {
                echo 'üìà Publication du rapport JaCoCo dans Jenkins...'
                jacoco()
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'üîç Analyse statique avec SonarQube...'
                withSonarQubeEnv('SonarQube') {
                    sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=devsecops \
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                echo 'üõ°Ô∏è V√©rification de la Quality Gate SonarQube...'
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                echo 'üöÄ D√©ploiement vers Nexus...'

                // Injection des credentials Nexus configur√©s dans Jenkins (user/pass)
                withCredentials([usernamePassword(credentialsId: 'nexus-creds', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    // D√©ploie avec les identifiants, en utilisant settings.xml sp√©cifique si n√©cessaire
                    sh '''
                        mvn deploy -Dusername=$NEXUS_USER -Dpassword=$NEXUS_PASS
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s.'
        }
        failure {
            echo '‚ùå √âchec du pipeline. Consultez les logs.'
        }
        aborted {
            echo '‚ö†Ô∏è Pipeline interrompu manuellement.'
        }
        always {
            echo 'üèÅ Fin du pipeline.'
        }
    }
}

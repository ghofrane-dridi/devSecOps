pipeline {
    agent any

    tools {
        maven 'M3'         // Nom Maven configur√© dans Jenkins (Global Tool Configuration)
        jdk 'JDK 17'       // Nom JDK configur√© dans Jenkins
    }

    environment {
        GITHUB_TOKEN   = credentials('github-token')      // ID du token GitHub (Credentials)
        SONAR_TOKEN    = credentials('sonar-token')       // ID du token SonarQube (Credentials)
        SONAR_HOST_URL = 'http://localhost:9000'          // Adresse du serveur SonarQube
    }

    stages {

        stage('Clone Repository') {
            steps {
                echo 'üì• Cloning source code...'
                git branch: 'main', url: 'https://github.com/<ton-utilisateur>/<ton-repo>.git'
            }
        }

        stage('Start Docker Compose') {
            steps {
                echo 'üê≥ Lancement des services via Docker Compose...'
                sh 'docker-compose down -v || true'
                sh 'docker-compose up -d --build'
            }
        }

        stage('Wait for Nexus (port 8081)') {
            steps {
                echo '‚è≥ Attente du d√©marrage de Nexus...'
                script {
                    // Attendre que Nexus r√©ponde (timeout 90s)
                    def maxTries = 30
                    def count = 0
                    def ready = false
                    while (!ready && count < maxTries) {
                        def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:8181", returnStdout: true).trim()
                        if (response == '200') {
                            ready = true
                            echo '‚úÖ Nexus est pr√™t.'
                        } else {
                            sleep(3)
                            count++
                        }
                    }
                    if (!ready) {
                        error '‚ùå Nexus ne r√©pond pas sur le port 8181 apr√®s 90s.'
                    }
                }
            }
        }

        stage('Build Maven') {
            steps {
                echo 'üîß Compilation du projet...'
                sh 'mvn clean install'
            }
        }

        stage('Analyse SonarQube') {
            steps {
                echo 'üîç Analyse SonarQube...'
                withSonarQubeEnv('SonarQube') {
                    sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=devSecOps \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage('D√©ploiement Nexus') {
            steps {
                echo 'üöÄ D√©ploiement de l‚Äôartefact dans Nexus...'
                sh 'mvn deploy'
            }
        }
    }

    post {
        always {
            echo 'üßπ Nettoyage des conteneurs Docker...'
            sh 'docker-compose down -v || true'
        }

        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s !'
        }

        failure {
            echo '‚ùå √âchec du pipeline. Voir les logs pour plus de d√©tails.'
        }
    }
}
